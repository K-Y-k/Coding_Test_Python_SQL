● 입출력, 문자열 처리
• 관련 함수들을 생각해서 활용하기


● 스택, 큐, 덱
• 리스트에 넣고 빼고를 활용해야하는 문제


● 수학
• 진법은 진법관련함수 생각해서 적용하자
• 최대공약수 구하는 함수(gcd함수 또는 유클리드 호제)를 생각해서 적용하자


● 그리디 알고리즘
1. 구하는 연산 공식을 정확히 집어야한다.
2. 각 케이스에 맞는 조건식으로 정확히 집어야한다.


● DP : 작은 문제에서 부터 큰 문제로 풀어가는 방식 
• DP라고 생각하기 기준
1.연속관련 내용의 문제 
2.각 경우의 수의 최대/최소 값의 문제
3.경우의 수의 규칙을 구하는 문제

• 풀이 방식
1. dp 배열 초기화(2차원 배열도 고려)
2. 일정 패턴이 오기 전까지 초반 부분의 답을 초기화해두기 
3. 작은 것으로 나누는 기준을 명확히 집어서 일정 규칙에 맞게 점화식을 세워 적용


● 그래프
• 어떤 상황이 주어지면 
  1.그래프로 모델링한 후 2.알고리즘을 적용해서 푼다.
  즉, 그래프로 만드는 것이 제일 중요하다.

- 그래프 용어
• 그래프: 정점과 간선(정점과 정점의 연결)으로 이루어진다.

• 경로   : 정점A에서 정점B로 가는 경로

• 사이클: 정점의 시작점과 도착점이 같은 경로
            (즉, 다시 돌아오는 경로)

• 단순경로/단순 사이클: 같은 정점을 2번이상 방문하지 않는 경로/사이클
                              (즉, 일반적인 경로/사이클이 이 뜻임)

• 그래프는 방향이 있는 그래프와 없는 그래프(=양방향)가 있다. 
   방향 없는 그래프는 모두 방향이 있게 만들어야한다.

• 정점A->정점B의 간선이 여러 개일 수 있다. 
  이 때는 그때 문제 상황에 따라 처리해주어야한다.

• 루프: 간선의 양 끝점(정점)이 같은 경우 ex) A->A

• 가중치: 간선에 써있는 값 
            즉 이는 이동거리/시간/비용 등을 표현한다. 
            간선에 가중치 표기가 없으면 기본값은 1

• 차수 : 해당 정점과 연결되어 있는 간선의 개수
          In-degree: 해당 정점으로 들어오는 방향의 간선 개수
          Out-degree: 해당 정점이 아닌 상대 정점으로 들어가는 방향의 간선 개수

- 그래프로 표현하기
  주로 사용하는 방식 = 인접 리스트로 저장방식
• 리스트를 이용해서 구현한다.
• A[i] = i와 연결된 정점을 리스트로 포함하고 있음

(2,3번 방식이 연결된 간선을 효율적으로 찾을 수 있다.
 하지만 2번 인접 행렬의 공간복잡도는 O(V^2)이고 3번 리스트 방식은 O(E)이므로 2번은 사용 안함)


- 그래프 탐색
• 목적: 임의의 정점에서 시작해서 연결되어 있는 모든 정점을 1번씩 방문하는 것
1.DFS
하나의 정점에서 한 정점까지 끝까지 방문한 후 다시 돌아와서 다른 정점으로 가는 깊이우선 탐색
스택으로 구현, check[i]을 활용해서 방문하면 0에서 1로 변경, 재귀호출로 구현가능
인접리스트로 구현한 DFS의 시간 복잡도 = O(V+E) = O(E)

2.BFS
같은 너비이면 한번에 가는 너비우선 탐색 
큐로 구현
최단거리를 구할 때는 DFS는 안되고 이 방식을 사용해야한다.


- 그래프 연결요소 개수
• ex1) 연결된 그래프가 나뉘어져 있으면 연결요소 2개
• ex2) 연결된 그래프가 하나만 있으면 연결요소 1개
• 즉, DFS/BFS의 시작지점의 개수로 연결요소의 개수를 구할 수 있다.
  (시작 지점을 새로 한다는 것은 다른 연결요소가 있다는 뜻이므로)


- 이분 그래프
• 하나의 그래프를 2개로 나눌 수 있는 그래프
• 이분 그래프의 구현은 DFS/BFS 모두 구현가능
