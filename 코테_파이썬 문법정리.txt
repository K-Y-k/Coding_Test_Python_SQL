- 설치
1. python 설치
2. cmd에서 python3입력해서 확인
3. 환경변수 설정

- 설치 없이 무료 언어 사용 사이트
https://ideone.com/

- 구성
쉘 : 간단한 실행들
파일 : 복잡하고 자주 사용되는 것들

쉘 파일을 실행할 때 python interpretrer를 통해 번역하고 전달
-> 운영체제 -> 컴퓨터


- 파이썬 쉘(interactive mode)
파이썬 시작하기 
1. 터미널 키고
2. >> python3

파이썬 종료
>> exit()


- 파이썬 파일
실행하기
터미널에 python3 파일명.py 입력


- 파이썬 데이터 타입
Number   숫자  - int    정수형
                      - float 실수형
Text        문자
Sequence 
Boolean
Mapping
Set
Binary


- 디버거
파이썬의 디버거는 조금 복잡하여 에디터로 활용한다.

VSS기준
1. 런 이미지 클릭 
2. 오류가 추론되는 내용 있으면 그부분 드래그하고 브레이크 포인트 찍기
3. run and debug 클릭
4. 파이썬 파일 클릭

노란색 화살표가 진행 위치고 그 이전 것들은 실행된 것이다.


- 소프트웨어 설치 pip
python3 -m pip install

- 제어문

- 함수


- 문제
어떤 동물원에 가로로 두칸 세로로 N칸인 아래와 같은 우리가 있다.
이 동물원에는 사자들이 살고 있는데 사자들을 우리에 가둘 때, 
가로로도 세로로도 붙어 있게 배치할 수는 없다. 
이 동물원 조련사는 사자들의 배치 문제 때문에 골머리를 앓고 있다.
동물원 조련사의 머리가 아프지 않도록 우리가 2*N 배열에 사자를 배치하는 경우의 수가 몇 가지인지를 알아내는 프로그램을 작성해 주도록 하자. 
사자를 한 마리도 배치하지 않는 경우도 하나의 경우의 수로 친다고 가정한다.

입력
첫째 줄에 우리의 크기 N(1≤N≤100,000)이 주어진다.

출력
첫째 줄에 사자를 배치하는 경우의 수를 9901로 나눈 나머지를 출력하여라.

예제 입력 1 
4

예제 출력 1 
41



● 출력
• printf('ㅎㅇ')

• 숫자와 문자 출력 같이하기 
   1. print(f'A의 값은 {A}입니다.')
   2. print('A의 값은', A, '입니다.')  , 하면 자동 띄어짐
   3. print("%d %s", %(A, B))         %로 출력할 경우의 방식

• N째자리까지 출력 
   ex) print(f'{result:.3f}%')

• print \와 ''출력법
    1. 역슬래시를 출력하려면 역슬래시 한번 더 \\
    2. '을 출력하려면 ''로 감싸지 말고 ""로 감싸자 (역으로 ""출력시 '로 감싸기)
                                                             (' " 둘이 겹칠 시 \" 이렇게 하면 됨) 

• 줄바꿈 : \n

• %x로 출력하면 16진수(hexadecimal) 소문자로 출력된다.  -> hex()
   ex) print("%x" %a)
   PS) 만약 대문자면? "%X"

• %o로 출력하면 8진수(octal) 문자열로 출력된다.     -> oct()

• 만약 16진법 -> 8진법 전환은?
   ex) a = int(input(), 16)
        print("%o", %a)

• 16진수로 출력
    ex) a = int(input(), 16) 
            for i in range(1, 16) :
                   print("%X*%X=%X" %(a, i, a*i))

• %b로 출력하면 2진수(binary) 문자열로 출력된다.     -> bin()   
                                                                   PS) %s -> str()

• 소수자리수 제한해서 출력하기
   1. 자리수까지만 출력 round(실수, 표기할 자리수) 
   2. 반올림한 자리수까지 출력 format(실수, ".표기할 자리수f") 또는 print('%.표기할 자리수f' %변수)

• 리스트 띄어쓰기 형태로 출력
   방법 1) print(*Ai_list)                
   방법 2) for i in Ai_list:
                    print(i, end=" ")

​

● bool 자료형의 True, False 기준 : bool( )
• 숫자는 0이 아닌 모든숫자는 True 이고, 딱 0만 False이다.
• 비어있는 리스트, 튜플, 딕셔너리, 문자열은 모두 False 이다.
• 반대 출력 : print(not a)

​
​
● 연산
• 거듭제곱 연산           **
• 나눈 몫만 구하기    / 또는 //    (/은 float 반환 //는 int 반환)
• 나머지                    %


​
● 비트 연산
• AND  : a & b
• OR    : a | b
• XOR  : a ^ b
• NOT  :~x

​

● 입력과 타입 변환
• input()함수에 입력된 것은 문자열 타입이다. 

• 한 개의 입력 
   ex) 변수 = input()

• A, B = input().split() 입력되는 문자를 input()함수로 입력받고 split()함수로 나누어 A,B 변수에 저장함

• print(int(A)+int(B))  int() 함수로 A와 B를 정수로 변환 하고 두수의 합을 출력

• 문자열의 한자리만 따오려면? 
   ex) A[0]

• 문자열의 지정된 범위만 따오려면? 
   ex1) A[0:2]  // A[0:2]는 A[0]~A[1]까지, A[2:4]는 A[2]~A[3]까지, A[4:6]은 A[4]~A[5]를 의미
   ex2) A[0:]   // A[0]~끝까지

• split() 안에 구분 기준을 세우면 그 기준에 따라 분리
   ex) a, b = input().split(':')        // 콜론 ':' 기호를 기준으로 자른다.
           print(a, b, sep=':')         // 콜론 ':' 기호를 사이에 두고 값을 출력한다.

• sep=':'  // ''안의 글자를 기준으로 변수가 출력되고 그 기준 문자도 같이 나옴

• 두 변수값을 공백없이 연속으로 출력하려면? 
   ex) sep = ''"

• 타입변환까지 동시에 하는 방법
   ex) A, B = map(int, input().split())

• 변수 하나 입력을 정수형으로 변환
   ex) A = int(input())

• 실수형으로 변환
   ex) A = float(input())

• 문자열로 형 변환 
   ex) A = str(input())

• 문자열 -> 10진수 유니코드 숫자 변환 : ord()
• 정수   -> 유니코드 문자 변환           : chr()

• 입력한 수를 리스트에 넣기
   ex) a = list(map(int, input().split()))

• 반복문에서의 여러줄 연속 입력은 input() 대신 sys.stdin.readline()을 사용하자.
   정렬, 이진탐색, 경로 문제의 경우 input은 시간초과가 발생하기 때문이다.
    ex) import sys
         a = int(sys.stdin.readline())                   // 한개의 입력
         a,b,c = map(int,sys.stdin.readline().split()) // 여러 개의 입력

• sys.stdin.readline().rstrip()  : 오른쪽 공백을 삭제
• sys.stdin.readline().lstrip()  : 왼쪽 공백을 삭제
• sys.stdin.readline().strip()   : 왼쪽, 오른쪽 공백을 삭제



● for 반복문
• for i in range(6) :                     // 6번 반복 단 시작은 0부터 시작하기에 i = 0 부터 시작이므로 주의
      print(a[i] - b[i], end=' ')          // end ='  '은 이어서 출력하기 위해서다. ' '안의 값을 넣는다. 

• for에 i가 필요 없을 경우 아무 변수(_)로 한다.

• 만약 범위를 1~9까지이면?
   ex) for i in range(1, 10) : 

• 리스트 문자를 하나씩 꺼내고 싶으면?
   ex) for i in ox_list:

• 두번째 원소부터 시작하고 싶으면? 
   ex) for score in a[1:] :   단, score 변수는 원소 값으로 나옴

• 역순으로
   방식 1) for i in range(n-1, -1, -1) :     
   방식 2) for i in reversed(range(n)) :   // 이게 더 좋음 

• n번 입력해서 넣기
   ex) for i in range(n) :
               coin_list.append(int(input()))

• 첫항 내부를 문자기준으로 나눠진 만큼 반복
   ex) for i in a[0].split('문') : 

• 리스트 같은 원소 추출하는법 
   for문 돌려서 not in 이면 append 

• 최대/최소값 = max()/min()

• 배열 원소를 활용한 반복 
   ex) b = [100, 10]
           for i in b :
                   result += i

​

● while 반복문
• while 조건식: 
                   실행문들1
   else: 
                   실행문들2
                   break

• 만약 break 문에 의해서 반복이 끝난다면 (for반복문과 마찬가지로) 
   else절은 수행되지 않고 그 바깥으로 빠져 나가게 된다.

• 무한 루프 
  while True :

• 예외 처리
ex)
try:     x = int(input('나눌 숫자를 입력하세요: '))     
         y = 10 / x     print(y) 
except:    // 예외가 발생했을 때 실행됨    
         print('예외가 발생했습니다.')


​
● 조건문 
• if문
  주의점 1) { }이 아닌 :로 사용
           2) 들여쓰기로 구분 잘하기 탭
           3) 조건 부분에 문자 True와 False는 ''을 안 씌운다. ex) if a == True :

• else if는 파이썬에서는 elif

• &&은 and 역할
•    ||은 or 역할
•    ^은 값이 서로 다를 경우 

​

● 배열
• 배열로 선언 및 활용
   ex)num_list = []
          for i in range(9):
                 num_list.append(int(input()))
                 print(max(num_list))
                 print(num_list.index(max(num_list))+1)  // 0번째에서 시작하기에 +1한 것이다

• 중복 제거한 리스트
     ex) s = set(num_list)
​
• 배열에서 [-1]은 마지막 요소

• 리스트의 원소들 작은 순서대로 정렬 
   ex) 리스트변수.sort()

• 역으로 뒤집기 
    ex) result = str(n)[::-1]

• append() : 리스트 마지막에 요소 추가
   ex1) list = [2, 9, 3]
         list.append('a')
         print(list) [2, 9, 3, 'a']
   ex2) list.append([1, 2, 3])
         print(list) [2, 9, 3, 'a', [1, 2, 3]]

• extend() : 모든 요소를 리스트에 추가(list, tuple 모두 가능)
   ex1) list = [2, 9, 3]
         list2 = [1, 2, 3]
         list.extend(list2)
         print(list)  [2, 9, 3, 1, 2, 3]

   ex2) tuple = (4, 5, 6)
         list.extend(tuple)
         print(list)  [2, 9, 3, 1, 2, 3, 4, 5, 6]

• insert(index, item)은 인자로 전달된 index의 위치에 item을 추가
  ex1) list = [2, 9, 3]
        list.insert(0, 'a')
        print(list)  ['a', 2, 9, 3]

  ex2) list.insert(2, 'b')
        print(list)  ['a', 2, 'b', 9, 3]


● 함수 
• def 함수 생성 예약어
   ex) def solve(a):
             ans = sum(a)
             return ans
• lambda
  익명함수를 지칭하는 용어 즉, 기존의 함수(명 등)을 선언하고
  사용하던 방식과는 달리 바로 정의하여 사용할 수 있는 함수.


● sort()
• 리스트명.sort()                 // 오름차순으로 정렬
• 리스트명.sort(reverse=True) // 내림차순으로 정렬

• 주의점
  : 리스트명.reverse()            // 현재 리스트 순서를 역으로 뒤집기
​﻿
• lambda를 활용한 정렬
   • key 인자에 함수를 넘겨주면 우선순위가 정해짐.
   • ex) c = sorted(key = lambda x : x[0]) // [1, 2]이면 앞에 1부분 위치 기준으로 정렬하는 것
         결과 : c = [(0, 1), (1, 2), (3, 0), (5, 1), (5, 2)]


● sorted()
• sorted(정렬할 데이터)
• sorted(정렬할 데이터, reverse 파라미터)
• sorted(정렬할 데이터, key 파라미터)
• sorted(정렬할 데이터, key 파라미터, reverse 파라미터)

• 리스트.sort()와 sorted(리스트)의 가장 큰 차이점
   리스트.sort()는 본체의 리스트를 정렬해서 변환하는 것이고,
   sorted(리스트명)는 본체 리스트는 내버려두고, 정렬한 새로운 리스트를 반환하는 것

​

● pop()
• 사용 예시
   s += min(a_list) * max(b_list)
   a_list.pop(a_list.index(min(a_list)))

​

● '구분자'.join(리스트)
• 리스트의 값과 값 사이에 '구분자'에 들어온 구분자를 넣어서 하나의 문자열로 합쳐준다.

• ex 1) ''.join(리스트) 
  매개변수로 들어온 ['a', 'b', 'c'] 이런 식의 리스트를'abc'의 문자열로 합쳐서 반환해주는 함수이다.

• ex 2) '_'.join(리스트)
   '_'.join(['a', 'b', 'c']) 라 하면 "a_b_c" 와 같은 형태로 문자열을 만들어서 반환해 줍니다.



● 파이썬 슬라이스
• 리스트, 튜플, 문자열 등 연속적인 객체의 범위를 지정해 객체를 가져오는 방법
   ex) array[start : end : step] 


● 딕셔너리
﻿• 파이썬은 이러한 대응 관계를 나타낼 수 있는 자료형을 가지고 있다.
  ex) dic = {'name':'pey', 'phone':'010-9999-1234', 'birth': '1118'}