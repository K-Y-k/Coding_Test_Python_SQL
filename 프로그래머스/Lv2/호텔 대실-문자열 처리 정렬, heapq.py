# 예약 시간 리스트를 입실 시간 기준으로 오름차순한다.(입실 시간이 같으면 퇴실시간을 오름차순)

# 예약 시간 리스트를 조회하면서 문자열인 시간을 숫자로 다시 표현해준 후

# 힙에 없으면 현재 시간의 퇴실 시간+방청소시간(10분)을 넣어준다.
# 힙에 있으면 힙의 제일 앞의 값인 퇴실 시간이 현재 입실 시간보다 작거나 같으면 해당방을 사용할 수 있다는 뜻이므로 현재 퇴실시간+방청소시간으로 새로 갱신해준다.
#            힙의 제일 앞의 값인 퇴실 시간이 현재 입실 시간보다 크면 새로운 방을 생성해야하므로 힙에 현재 현재 퇴실시간+방청소시간으로 추가해준다.

# 이렇게 모두 적용한 후의 힙의 길이가 결국 최소 이용해야하는 방의 개수이다.

import heapq

def solution(book_time):
    answer = 0
    heap = []                                         # 방을 위한 힙 생성
    
    book_time.sort(key=lambda x:(x[0], x[1]))         # 예약 시간 리스트를 입실 시간 기준으로 오름차순한다.(입실 시간이 같으면 퇴실시간을 오름차순)
    
    
    for i, j in book_time:                            # 예약 시간 리스트를 조회하면서
        i_h, i_m = map(int, i.split(':'))             # 문자열인 시간을 숫자로 다시 표현해준 후
        i = i_h * 60 + i_m
        
        j_h, j_m = map(int, j.split(':'))  
        j = j_h * 60 + j_m
        
        
        if not heap:                                  # 힙에 없으면
            heapq.heappush(heap, j+10)                # 현재 시간의 퇴실 시간+방청소시간(10분)을 넣어준다.  

        else:                                         # 힙에 있으면
            if heap[0] <= i:                          # 힙의 제일 앞의 값인 퇴실 시간이 현재 입실 시간보다 작거나 같으면
                heapq.heappop(heap)                   # 해당방을 사용할 수 있다는 뜻이므로 현재 퇴실시간+방청소시간으로 새로 갱신해준다.
                heapq.heappush(heap, j+10)
            else:                                     # 힙의 제일 앞의 값인 즉, 현재 방들의 제일 최소인 퇴실 시간이 현재 입실 시간보다 크면
                heapq.heappush(heap, j+10)            # 새로운 방을 생성해야하므로 힙에 현재 현재 퇴실시간+방청소시간으로 추가해준다.
    
    
    answer = len(heap)                                # 이렇게 모두 적용한 후의 힙의 길이가 결국 최소 이용해야하는 방의 개수이다.
    
    return answer