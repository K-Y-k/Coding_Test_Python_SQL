# 점화식 정의하기
① 현재 포도주와 이전 포도주를 마시고 전전 포두주는 마시지 않는다. ( wine[i]+wine[i-1]+d[i-3](=전전 포도주를 마시지 않은 경우의 수중 최대 값) )
② 현재 포도주와 전전 포도주를 마시고 이전 포도주는 마시지 않는다. ( wine[i]+d[i-2] )
③ 현재 포도주를 마시지 않는다. ( d[i-1] )

import sys

n = int(input())

wine = [0] * 10000                                        # 와인의 잔을 최대 값까지 초기화 후 선언

for i in range(n):                                           # 입력한 값까지 와인 잔의 값을 넣는다.
    wine[i] = int(sys.stdin.readline()) 
    
d = [0] * 10000                                            # 최대 값을 나타내는 dp를 와인의 잔 최대 값이랑 동일하게 초기화 후 선언
 
d[0] = wine[0]                                              # 와인이 1잔일 때의 최대 값 
d[1] = wine[0] + wine[1]                                 # 와인이 2잔일 때의 최대 값
d[2] = max(wine[2]+wine[1], wine[2]+wine[0], d[1]) # 와인이 3잔일 때의 최대 값

for i in range(3, n):                                        # 와인이 4잔일 때부터는 최대 값을 구하는 패턴이 점화식을 세운 케이스로 구할 수 있다.
    d[i] = max(d[i-3]+wine[i-1]+wine[i], d[i-2]+wine[i], d[i-1])

print(max(d))                                                # 각 와인 잔의 수에 따른 최대 값이 들어간 dp중 최대 값을 출력