# 2차원 다이나믹 풀이
N = int(input())                         # 입력 값 선언

d = [[0]*2 for _ in range(91)]       # 0으로 초기화 : 0과1이므로 [0]*2 / N의 최대값이 90까지로 for _ in range(91)

d[1][0] = 0                               # 자릿수가 1일 때 0은 안되므로 0개
d[1][1] = 1                               # 자릿수가 1일 때 1은 가능하므로 1개

for i in range(2, N+1):                # 자릿수가 1일 때는 위에서 초기화했으므로 2부터 입력 값까지 반복
    d[i][0] = d[i-1][0] + d[i-1][1]    # 마지막 숫자가 0이면 옆 숫자 N-1은 0과 1 둘 다 되므로 모두 더함
    d[i][1] = d[i-1][0]                   # 마지막 숫자가 1이면 옆 숫자 N-1은 1은 연속으로 안되므로 0인 경우만 해당

print(sum(d[N]))                        # N의 자리일 때 위 경우의 수를 모두 더한 것을 출력



# 1차원 다이나믹 풀이
N = int(input())                      # 입력 값 선언

d = [0]*91                            # N의 최대값(90)까지 0으로 초기화

d[1] = 1                               # 자릿수가 1일 때 '0'은 안되므로 '1'인 총 1개
d[2] = 1                               # 자릿수가 2일 때 '01'은 안되므로 '10'인 총 1개

for i in range(3, N+1):            # 자릿수 2일때까지는 위에 초기화했으므로 3부터 입력 값까지 반복 
    d[i] = d[i-1] + d[i-2]           # 점화식

print(d[N])                            # N의 자리일 때 출력 (1차원이라서 sum 합이 필요 없음)







