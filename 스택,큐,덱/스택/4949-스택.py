# 이 문제는 소괄호와 대괄호의 각 케이스에 맞게 스택에 담고 비교하면 된다.
# 문자를 하나씩 조회하며
# '(' 이거나 ']'일 때는 스택에 넣어주고
# ')'이면 최근 스택에 '('이 있으면 최근 '('와 매칭 시켰으므로 제거하고 
#         최근 스택에 '('이 없으면 무조건 불균형이므로 스택에 값을 넣고 반복을 종료한다. 
# ']'이면 최근 스택에 '['이 있으면 최근 '['와 매칭 시켰으므로 제거하고 
#         최근 스택에 '['이 없니면 무조건 불균형이므로 스택에 값을 넣고 반복을 종료한다. 
# 위 모든 작업을 모두 진행했는데도 스택에 값이 있으면 모두 매칭된 것이 아니므로 불균형의 'no'를 출력한다.
# 스택이 비었으면 모두 매칭된 것이므로 균형의 'yes'를 출력한다.

while True:
    word = input()

    if word == '.':
        break
    else:
        stack = []

        for i in word:                               # 문자를 하나씩 조회하며
            if i == '(' or i == '[':                 # '(' 이거나 ']'일 때는 스택에 넣어주고
                stack.append(i)
            elif i == ')':                           # ')'이면 
                if stack and stack[-1] == '(':       # 최근 스택에 '('이 있으면 최근 '('와 매칭 시켰으므로 제거하고
                    stack.pop()
                else:                                # 최근 스택에 '('이 없으면 무조건 불균형이므로 스택에 값을 넣고 반복을 종료한다.          
                    stack.append(')')
                    break
            elif i == ']':                           # ']'이면
                if stack and stack[-1] == '[':       # 최근 스택에 '['이 있으면 최근 '['와 매칭 시켰으므로 제거한다.
                    stack.pop()
                else:                                # 최근 스택에 '['이 없으면 무조건 불균형이므로 스택에 값을 넣고 반복을 종료한다. 
                    stack.append(']')
                    break

        if stack:                                    # 위 모든 작업을 모두 진행했는데도 스택에 값이 있으면 모두 매칭된 것이 아니므로 불균형의 'no'를 출력한다.
            print('no')
        else:                                        # 스택이 비었으면 모두 매칭된 것이므로 균형의 'yes'를 출력한다.
            print('yes')