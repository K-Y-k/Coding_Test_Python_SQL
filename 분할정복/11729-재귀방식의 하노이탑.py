# 하노이 탑에서의 최소 이동횟수는 2^(원판의 개수) - 1번이다.
# 하노이 탑의 원리는 원판의 개수가 N개이면
# 1단계에서 N-1개의 원판을 1번 장대에서 2번 장대로 옮긴다.
# 2단계에서 남은 1개의 원판을 1번 장대에서 3번 장대로 옮긴다.
# 3단계에서 다시 N-1개의 원판을 2번 장대에서 3번 장대로 옮긴다.

# 직접 위 예제입력1을 아래 코드의 함수에 순차적으로 적용된 순서를 작성해보았다.
# 매개변수는 (원판의 개수, 옮기는 장대, 옮겨지는 곳의 장대)
# (3, 1, 3) -> (2, 1, 2)     -> (1, 1, 3)    -> ① 1 3 출력
#                            -> ② 1 2 출력
#                            -> (1, 3, 2)    -> ③ 3 2 출력
#           -> ④ 1 3 출력
#           -> (2, 2, 3)     -> (1, 2, 1)    -> ⑤ 2 1 출력
#                            -> ⑥ 2 3 출력
#                            -> (1, 1, 3)    -> ⑦ 1 3 출력

﻿ 
def hanoi_tower(N, start, end) :               # 원판의 개수 N, 옮기는 장대 위치 start, 옮겨지는 장대 위치 end
    if N == 1 :                                # 원판의 개수가 1개이면 
        print(start, end)                      # 옮기고 반환
        return
  
    hanoi_tower(N-1, start, 6-start-end)       # 1단계: 1개의 원판이 남을 때까지 2번째의 장대로 옮김
    print(start, end)                          # 2단계: 1개의 원판만 남은 것을 3번째의 장대로 옮김 
    hanoi_tower(N-1, 6-start-end, end)         # 3단계: 2번째의 장대의 모든 원판을 3번째의 장대로 옮김
    
N = int(input())                               # 원판의 개수 입력
print(2**N - 1)                                # 최소 이동횟수 출력
hanoi_tower(N, 1, 3)                           # 하노이탑 이동 진행